//class Tema1<T extends GenericNumber<?>>
//{
//	public void start()
//	{
//		Double machinePrecisionNumber;
//		Double denominator, numerator; // numerator/denominator
//		denominator = 1.0;
//		numerator = 1.0;
//		Double step = 10.0;
//		
//		Double precisionUnit = 1.0;
//		
//		do
//		{
//			denominator = step * denominator;
//			machinePrecisionNumber = numerator / denominator;
//			if((precisionUnit + machinePrecisionNumber) == precisionUnit) break;
//		} while(true);
//
//		System.out.println(machinePrecisionNumber);
//		
//		/* ********************************** */
//		
//		Double x, y, z;
//		x = 1.0;
//		y = machinePrecisionNumber;
//		z = machinePrecisionNumber;
//		
//		Double firstSum, secondSum;
//		firstSum = (( x + y ) + z);
//		secondSum = ( x + ( y + z ));
//
//		System.out.println("( x + y ) + z = " + firstSum);
//		System.out.println("x + ( y + z ) = " + secondSum);
//		if(firstSum.compareTo(secondSum) != 0)
//			System.out.println("neasociativa");
//		else 
//			System.out.println("asociativa");
//		
//		
//		Double firstProduct, secondProduct;
//		firstProduct = (( x * y ) * z);
//		secondProduct = ( x * ( y * z ));
//		
//		System.out.println("( x * y ) * z = " + firstProduct);
//		System.out.println("x * ( y * z ) = " + secondProduct);
//		if(firstProduct.compareTo(secondProduct) != 0)
//			System.out.println("neasociativa");
//		else 
//			System.out.println("asociativa");
//	}
//
//	public void start2(GenericNumber<Number> machinePrecisionNumber, GenericNumber<Number> precisionUnit, GenericNumber<Number> denominator, GenericNumber<Number> numerator, GenericNumber<Number> step)
//	{
////		Double machinePrecisionNumber;
////		Double denominator, numerator; // numerator/denominator
////		denominator = 1.0;
////		numerator = 1.0;
////		Double step = 10.0;
////		
////		Double precisionUnit = 1.0;
//		
//		do
//		{
//			denominator = step.multiply(denominator);
//			machinePrecisionNumber = numerator.divide(denominator);
//			if((precisionUnit.add(machinePrecisionNumber)).compareTo(precisionUnit)) break;
//		} while(true);
//
//		System.out.println(machinePrecisionNumber);
//		
//		/* ********************************** */
//	}
//}











//		BigDecimal[][] values = new BigDecimal[4][4];
//		values[0][0] = new BigDecimal("18"); values[0][1] = new BigDecimal("22"); values[0][2] = new BigDecimal("54");  values[0][3] = new BigDecimal("42");
//		                                     values[1][1] = new BigDecimal("70"); values[1][2] = new BigDecimal("86");  values[1][3] = new BigDecimal("62");
//		                                                                          values[2][2] = new BigDecimal("174"); values[2][3] = new BigDecimal("134");
//		                                                                                                                values[3][3] = new BigDecimal("106");
//        CholeskyMatrix A = new CholeskyMatrix(4, values, new EpsilonPrecision(9));
		
//		BigDecimal[][] values = new BigDecimal[3][3];
//		values[0][0] = new BigDecimal("25"); values[0][1] = new BigDecimal("15"); values[0][2] = new BigDecimal("-5");
//		                                     values[1][1] = new BigDecimal("18"); values[1][2] = new BigDecimal("0");
//		                                                                          values[2][2] = new BigDecimal("11");
//        CholeskyMatrix A = new CholeskyMatrix(3, values, new EpsilonPrecision(9));
		
//		BigDecimal[][] values = new BigDecimal[3][3];
//		values[0][0] = new BigDecimal("1"); values[0][1] = new BigDecimal("2.5");  values[0][2] = new BigDecimal("3");
//		                                    values[1][1] = new BigDecimal("8.25"); values[1][2] = new BigDecimal("15.5");
//		                                                                 /*6.25*/  values[2][2] = new BigDecimal("43");
//        CholeskyMatrix A = new CholeskyMatrix(3, values, new EpsilonPrecision(9));

		
//		A.decompose();
//		System.out.println(A.printA());
//		System.out.println(A.printD());
//		System.out.println(A.printL());

		
//		A.determinant();
//		System.out.println(A.getDet());
		

		
//		Matrix m = new DiagonalMatrix(2);
//		MutableMatrix mm = new DiagonalMatrix(2);

		/*
		 * La tema 1 atentie la POW ~!!!!!!!!!!!!
		 */
		
//		BigDecimal[][] v = new BigDecimal[2][];
//		
//		BigDecimal[] r1 = new BigDecimal[]{new BigDecimal("1")};
//		BigDecimal[] r2 = new BigDecimal[]{new BigDecimal("2"), new BigDecimal("3")};
//		
//		v[0] = r1;
//		v[1] = r2;
//		
//		System.out.println("END");